---
description: 
globs: 
alwaysApply: true
---
Rule Name: global
Description: |
## duwallet 開発運用ルール（AI エージェント用）
本プロジェクトでは **AI エージェント** が実装・テスト・ドキュメント更新を担当します。
目的はアプリケーションの完成です。
下記ガイドラインを *厳守* してください。

### 1. ドキュメント同期・整合性確認
- docs/配下の**全ての設計・仕様・スキーマ・画面定義ファイル（.md, .yaml）**を毎セッション解析し、内容の矛盾が無いことを確認してからタスクを実行すること。
  - 画面仕様：docs/screens/*.yaml
  - DBスキーマ：docs/database_schema/*.md
  - 技術スタック・ディレクトリ構成：docs/specs/*.md
  - 環境構築・Secrets：docs/setup/*.md
- もし新たにYAMLや設計ファイルが追加された場合は、次回以降の同期対象に含めること。

### 2. タスク管理フロー
- 【必須】【順序厳守】タスク着手前に必ず `type/T-XX-task-name` 形式でブランチを作成すること。
  - type例: feature, fix, docs, style, refactor, test, chore, perf, ci, build
  - 例: `feature/T-01-setup-environment`
- 【必須】docs/配下の設計・仕様・スキーマ・画面定義ファイル（.md, .yaml）を毎セッション解析し、内容の矛盾が無いことを確認してからタスクを実行すること。
  - 画面仕様：docs/screens/*.yaml
  - DBスキーマ：docs/database_schema/*.md
  - 技術スタック・ディレクトリ構成：docs/specs/*.md
  - 環境構築・Secrets：docs/setup/*.md
- タスク管理は `docs/tasks/task_manager.yaml` で一元管理し、全タスクをトップレベルの配列でDAG（依存関係）・進捗・履歴・成果物を明示する。
- 各タスクの詳細は `docs/tasks/pending/` または `docs/tasks/done/` の個別YAMLで管理し、task_manager.yamlから参照・連携する。
- 【必須】タスクの完了は、vercelデプロイ時の `pnpm run build` でエラーなくタスク内容の動作ができること。
- タスク完了後は該当YAMLを `done/` へ移動し、`status` を `done` に更新。
- タスクの依存関係や進捗管理、履歴・成果物の記録もtask_manager.yamlで一元化。
- 今後タスク追加・編集・削除・履歴管理もこの運用に従う。
- 【必須】ログやドキュメント内の日時情報は、`date -Iseconds --utc` を使用し、常に日本標準時（JST）の現在時刻を正確に記録すること。形式は `YYYY-MM-DDTHH:mm:ss+09:00` を推奨する。

#### 【AIエージェント用チェックリスト】
1. [ ] type/T-XX-task-name 形式でブランチを作成したか？
2. [ ] docs/配下の設計・仕様・スキーマ・画面定義ファイルを全て解析し、矛盾が無いか確認したか？
3. [ ] task_manager.yamlにタスクを登録・進捗・依存関係を明示したか？
4. [ ] タスク詳細YAMLをpending/に作成したか？
5. [ ] タスク完了時にdone/へ移動し、statusをdoneに更新したか？

### 3. コミット規約
- 【必須】【順序厳守】コミット前チェック:
  1. 修正後はエラーが**完全に無くなる**までコマンド等で確認し、解消されるまで試行を継続。
  2. 失敗した場合は修正→再実行を繰り返す。
- `--no-verify` でのスキップは禁止。
- コミットメッセージは `type(scope): subject` 形式で作成する。
  - scope例: auth, ui, api
  - subject: 変更内容の簡潔な説明（命令形で）

### 4. 齟齬報告の厳格運用
- 致命的かどうかに関わらず、設計・仕様・スキーマ・画面定義・運用ルール・実装・成果物などに差異が1つでもあれば、必ず「齟齬あり」として明記し、内容を具体的に列挙すること。
- 「完全一致」以外は「齟齬なし」とは絶対に表現しないこと。
- どんなに小さな差異も"齟齬"として必ず説明し、ユーザーの運用基準・期待値に合わせて報告すること。
- 全てのdocs/配下の設計・仕様・スキーマ・画面定義ファイルで同様に厳密に扱うこと。