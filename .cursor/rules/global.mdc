---
description: 
globs: 
alwaysApply: true
---
Rule Name: global
Description: |
## duwallet 開発運用ルール（AI エージェント用）
本プロジェクトでは **AI エージェント** が実装・テスト・ドキュメント更新を担当します。
目的はアプリケーションの完成です。
下記ガイドラインを *厳守* してください。

### 1. ドキュメント同期・整合性確認
- docs/配下の**全ての設計・仕様・スキーマ・画面定義ファイル（.md, .yaml）**を毎セッション解析し、内容の矛盾が無いことを確認してからタスクを実行すること。
  - 画面仕様：docs/screens/*.yaml
  - DBスキーマ：docs/database_schema/*.md
  - 技術スタック・ディレクトリ構成：docs/specs/*.md
  - 環境構築・Secrets：docs/setup/*.md
- もし新たにYAMLや設計ファイルが追加された場合は、次回以降の同期対象に含めること。

### 2. タスク管理フロー
- タスク着手前に `type/T-XX-task-name` 形式でブランチを作成。`XX`はタスク番号、`task-name`は英小文字ハイフン区切り。
  - type例: feature, fix, docs, style, refactor, test, chore, perf, ci, build
  - 例: `feature/T-01-setup-environment`
- 完了後は関連ファイルを `docs/tasks/done/` へ移動すること。
- タスクの依存関係や進捗管理は、必要に応じて.mdまたは新規YAMLで管理する（現状task_manager.yamlは未導入）。

### 3. コミット規約
- **コミット前チェック必須**:
  1. 修正後はエラーが**完全に無くなる**までコマンド等で確認し、解消されるまで試行を継続。
  2. `pnpm lint && pnpm test && pnpm playwright test --reporter=line && pnpm store prune && pnpm install --force && pnpm build` を通過すること。
  3. 失敗した場合は修正→再実行を繰り返す。
- `--no-verify` でのスキップは禁止。
- コミットメッセージは `type(scope): subject` 形式で作成する。
  - scope例: auth, ui, api
  - subject: 変更内容の簡潔な説明（命令形で）