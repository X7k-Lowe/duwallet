---
description: 
globs: 
alwaysApply: true
---
Rule Name: global
Description: |
  ## duwallet 開発運用ルール（AI エージェント用）
  本プロジェクトでは **AI エージェント** が実装・テスト・ドキュメント更新を担当します。
  目的はアプリケーションの完成です。
  下記ガイドラインを *厳守* してください。

  ### 1. YAML ドキュメント同期
  - docs/specs 配下の YAML (**spec.yaml**, **detailed_design.yaml**, **tech_stack.yaml**, **directory.yaml**, **database_schema.yaml**, **test_plan.yaml**, **ui_components.yaml**, **api_contract.yaml**, **calc_logic.yaml**, **rls_policy.yaml**, **env_vars.yaml**, **edge_functions.yaml**) を **毎セッション** 解析し、内容の矛盾が無いことを確認してからタスクを実行すること。

  ### 2. タスク管理フロー
  - 未着手タスクは `docs/tasks/pending/*.yaml` に *最小粒度* で格納する。
  - 完了後はファイルを `docs/tasks/done/` へ移動し、`task_manager.yaml` のステータスを `done` へ更新する。
  - `task_manager.yaml` は **DAG 形式** でタスク依存関係（直列 / 並列）を明示する。

  ### 3. 実装ポリシー
  - コード生成時は YAML をソースオブトゥルースとし、**ハルシネーションゼロ**・**省略禁止** を徹底する。
  - 変更差分は Pull Request で提示し、README / docs へ反映漏れが無いかレビューを行う。
  - ローカル・CI の両方で `pnpm lint && pnpm test && pnpm playwright test --reporter=line` がグリーンになるまで、また `pnpm build` でビルドが成功するまで、タスクは **未完了** とみなし、コミットしない。
  - `.eslintrc.json` に定義されたESLintルールに厳密に従ってコードを実装する：
    - TypeScriptの型安全性を保ち、`any`型は極力使用しない
    - 未使用変数は削除する
    - Reactフックのルールを遵守する
    - Tailwind CSSのクラス名ルールに従う
    - Prettierによるコード整形ルールに準拠する

  ### 4. コミット規約
  - **Conventional Commits** を採用し、`type(scope): subject` 形式でメッセージを作成する。
    - **主なタイプ(type)の例**:
      - `feat`: 新機能の追加
      - `fix`: バグ修正
      - `docs`: ドキュメント更新
      - `style`: コードスタイル変更（機能に影響なし）
      - `refactor`: リファクタリング（機能に影響なし）
      - `test`: テスト追加・修正
      - `chore`: ビルドプロセスや補助ツールの変更
      - `perf`: パフォーマンス改善
      - `ci`: CI設定ファイルとスクリプトの変更
      - `build`: ビルドシステムや外部依存関係の変更
    - **scope**: 変更対象のコンポーネントや機能（例: `auth`, `ui`, `api`）
    - **subject**: 変更内容の簡潔な説明（命令形で）
  - Pre-commit で **ESLint**, **Prettier** を自動修正し、lint-staged で対象ファイルを限定。
  - **コミット前チェック必須**:
    1. TypeScript, ESLint, CSS などのエラー、コンパイルエラーなどを全て解消する。
    2. 修正後はエラーが **完全に無くなる** までコマンド等で確認し、解消されるまで試行を継続。
    3. `pnpm lint && pnpm test && pnpm playwright test --reporter=line` を通過する。
    4. 失敗した場合は修正→再実行を繰り返す。
  - `--no-verify` でのスキップは禁止。

  ### 5. セキュリティ & RLS
  - Supabase **Row Level Security** は `database_schema.yaml` へ記述。
  - 変更時はマイグレーション SQL を生成・適用・テストすること。

  ### 6. ドキュメント更新自動化
  - Mermaid / PlantUML ソースは `docs/diagrams` に置き、`npm run docs:build` で PNG/SVG を生成。
  - README 変更時はビルド済みアセットも更新する。

  ### 7. 環境再現性
  - `docker compose up -d supabase` でローカルバックエンドが即起動できるよう、`docker-compose.yml` と `.env.example` を管理する。

  ### 8. 秘密情報の取扱い
  - 秘密情報は `.env` に保存し Git には含めない。
  - Supabase *anon/public キー* は公開可だが、*write/service_role キー* は厳禁。

  ### 9. セッション開始マクロ
  - 新規ターミナルでは最初に `bind 'set enable-bracketed-paste off'` を実行し、`[200~` プレフィクス問題を回避。

  ### 10. 言語ポリシー
  - 自然言語レスポンスは **日本語**、コード・コマンド・識別子は **英語 CamelCase**。

  ### 11. スペック同期義務
  - 新規ファイル／ディレクトリ／技術スタック導入や既存仕様に変更がある場合は、対応する YAML (例: **tech_stack.yaml**, **directory.yaml**) と README を即時更新し、コミットに含めること。

  ### 12. ブランチ管理ポリシー
  - タスク着手前に `feature/T-XX-task-name` 形式でブランチを作成。`XX` はタスク番号、`task-name` は英小文字ハイフン区切り。
    - 例: `feature/T-01-setup-environment`, `feature/T-02-configure-ci`

  ### 13. ターミナルツール入力精度
  - コマンド入力時に先頭文字が欠落する問題（例: `git` → `it`）が発生した場合、正確なコマンドが入力されるまで再実行する。